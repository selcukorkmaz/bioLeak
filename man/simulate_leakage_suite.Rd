% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/simulate_suite.R
\name{simulate_leakage_suite}
\alias{simulate_leakage_suite}
\title{Simulate leakage scenarios and audit results}
\usage{
simulate_leakage_suite(
  n = 500,
  p = 20,
  prevalence = 0.5,
  mode = c("subject_grouped", "batch_blocked", "study_loocv", "time_series"),
  learner = c("glmnet", "ranger", "xgboost"),
  leakage = c("none", "subject_overlap", "batch_confounded", "peek_norm", "lookahead"),
  rho = 0,
  K = 5,
  repeats = 1,
  horizon = 0,
  B = 1000,
  seeds = 1:10,
  parallel = FALSE,
  signal_strength = 1,
  verbose = FALSE
)
}
\arguments{
\item{n}{Integer. Number of samples.}

\item{p}{Integer. Number of predictors.}

\item{prevalence}{Numeric. Prevalence (probability of class 1).}

\item{mode}{Character. Cross-validation mode:
`"subject_grouped"`, `"batch_blocked"`, `"study_loocv"`, `"time_series"`.}

\item{learner}{Character. Base learner: `"glmnet"`, `"ranger"`, or `"xgboost"`.}

\item{leakage}{Character. Leakage type:
`"none"`, `"subject_overlap"`, `"batch_confounded"`, `"peek_norm"`, `"lookahead"`.}

\item{rho}{Numeric. Autocorrelation coefficient (0 = independent).}

\item{K}{Integer. Number of folds.}

\item{repeats}{Integer. Number of repeats.}

\item{horizon}{Numeric. Time gap for time-series CV.}

\item{B}{Integer. Number of permutations for `audit_leakage`.}

\item{seeds}{Integer vector. Random seeds for Monte Carlo replicates.}

\item{parallel}{Logical. If TRUE, uses `parallel::mclapply()` for multi-seed execution.}

\item{signal_strength}{Numeric. Scaling factor for signal-to-noise ratio.}

\item{verbose}{Logical. If TRUE, prints progress messages for each seed and mode.}
}
\value{
A `LeakSimResults` data frame with columns:
- `seed`: simulation seed
- `metric_obs`: observed model performance
- `gap`: permutation-gap statistic
- `p_value`: permutation-based significance
- `leakage`: leakage scenario
- `mode`: CV mode used
}
\description{
Runs a Monte Carlo simulation suite for evaluating leakage detection
across multiple leakage types, CV modes, and learners.

For each seed, this function:
1. Simulates a dataset with a defined leakage mechanism.
2. Generates leakage-resistant CV splits using `make_splits()`.
3. Fits a machine learning model using `fit_resample()`.
4. Audits leakage with the permutation-gap diagnostic (`audit_leakage()`).
}
\details{
The function can optionally run in parallel using
`parallel::mclapply()` for Linux/macOS systems.
**Windows users** should set `parallel = FALSE` (or `mc.cores = 1`)
because `mclapply` is not supported under Windows.
}
\examples{
\dontrun{
res <- simulate_leakage_suite(
  n = 300, p = 10, mode = "subject_grouped",
  learner = "ranger", leakage = "subject_overlap",
  seeds = 1:5, parallel = FALSE, verbose = TRUE
)
head(res)
}

}
